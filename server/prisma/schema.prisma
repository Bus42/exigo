datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

generator photonjs {
  provider = "photonjs"
}

model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  email        String   @unique
  // TODO: Add support for multiple auth providers, e.g. Facebook and Google
  passwordHash String
  name         String?
  quizzes      Quiz[]
}

model Quiz {
  id                 String     @id @default(cuid())
  author             User       @relation(onDelete: CASCADE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  isPrivate          Boolean    @default(false)
  title              String
  timeLimitInMinutes Int?
  items              QuizItem[]
}

// TODO: Use union type (https://github.com/prisma/prisma2/issues/253), e.g.:
// union QuizItem = MultipleOptionsQuizItem | NumericQuizItem

model QuizItem {
  // TODO: Move these fields to `QuizItemBase`
  id   String       @id @default(cuid())
  quiz Quiz         @relation(onDelete: CASCADE)
  type QuizItemType
  stem String

  t_MultipleOptions MultipleOptionsQuizItemFragment?
  t_Numeric         NumericQuizItemFragment?
}

enum QuizItemType {
  MULTIPLE_OPTIONS
  NUMERIC
}

// TODO: implements QuizItemBase
model MultipleOptionsQuizItemFragment {
  id                   String   @id @default(cuid())
  quizItem             QuizItem @relation(references: id, onDelete: CASCADE)
  options              Option[]
  constraints_minCount Int?     @default(1)
  constraints_maxCount Int?     @default(1)
}

model Option {
  id         String   @id @default(cuid())
  quizItem   QuizItem @relation(onDelete: CASCADE)
  text       String
  isSolution Boolean  @default(false)
}

// TODO: implements QuizItemBase
model NumericQuizItemFragment {
  id                   String   @id @default(cuid())
  quizItem             QuizItem @relation(references: id, onDelete: CASCADE)
  solution             Float
  precision            Float?   @default(0)
  stepSize             Float?   @default(1)
  constraints_minValue Float?
  constraints_maxValue Float?
}
